What happens when you initialize a repository? Why do you need to do it?

when the command "git init" is executed the .git folder is created and the directory becomes a git repository , this command is needed so that the git recognizes it as a repository and the commit command can be used on it thereafter.

How is the staging area different from the working directory and the repository? What value do you think it offers?

staging area is temporary area where files can be added and worked upon before commiting, it offers the value of not changing the original file but still allowing to make changes until the commit command is used, command ussed to add file ti staging area "git add <filename>"

How can you use the staging area to make sure you have one commit per logical change?

by using various git diff commands we can check what changes have been made and which ones need to be commited. Commands used "git diff" "git diff --staged"


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

if we want make experimental changes to our project but dont want to change the master file,  branches can help us do that.

How do the diagrams help you visualize the branch structure?

working on a project with a number of people could result in multiple branch creation annd keeping track of these branches can get tedious, making diagrams can help visualize these branch structure by showing us which branch child is realted to which branch parent and so on.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

when we merge to branches together using the command "git merge branch1 branch2" the code or txt in the two branches merge into one and result into a single branch with the code from both the branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros:
helps save time and effort
dont have to look at the code to find the changes made by each user

cons:
conflicts can occur from time to time


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.